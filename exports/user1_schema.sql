/

BEGIN 
sys.dbms_logrep_imp.instantiate_schema(schema_name=>SYS_CONTEXT('USERENV','CURRENT_SCHEMA'), export_db_name=>'GF6F7CAFDC95335_ADBADOMINIO', inst_scn=>'45186726222751');
COMMIT; 
END;
/

BEGIN 
dbms_cloud.create_credential('"GITHUB_CREDENTIAL"', username=>'caiogusto2', password=>'NULL');
COMMIT; 
END;
/
CREATE SEQUENCE  "DEMO"."DBTOOLS$EXECUTION_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL
/
CREATE TABLE "DEMO"."DBTOOLS$EXECUTION_HISTORY" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"HASH" CLOB COLLATE "USING_NLS_COMP", 
	"CREATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"CREATED_ON" TIMESTAMP (6) WITH TIME ZONE, 
	"UPDATED_BY" VARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"UPDATED_ON" TIMESTAMP (6) WITH TIME ZONE, 
	"STATEMENT" CLOB COLLATE "USING_NLS_COMP", 
	"TIMES" NUMBER, 
	 CONSTRAINT "DBTOOLS$EXECUTION_HISTORY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/

/
CREATE OR REPLACE EDITIONABLE PROCEDURE "DEMO"."CRIAR_TABELA_DESNORMALIZADA2425" IS
BEGIN
  -- Tenta dropar a tabela se existir
  BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE desnormalizada2425';
  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE != -942 THEN -- ignora erro de "table does not exist"
        RAISE;
      END IF;
  END;

  -- Cria a nova tabela com CTAS
  EXECUTE IMMEDIATE q'[
    CREATE TABLE desnormalizada2425 AS
    SELECT
        o.ORDER_ID,
        o.ORDER_DATE,
        o.ORDER_MODE,
        o.ORDER_STATUS,
        o.ORDER_TOTAL,
        o.DELIVERY_TYPE,
        o.COST_OF_DELIVERY,
        o.WAIT_TILL_ALL_AVAILABLE,

        -- Customer Info
        c.CUSTOMER_ID,
        c.CUST_FIRST_NAME,
        c.CUST_LAST_NAME,
        c.CUST_EMAIL,
        c.CUSTOMER_CLASS,
        c.CREDIT_LIMIT,
        c.CUSTOMER_SINCE,
        c.DOB,

        -- Preferred Address
        a.HOUSE_NO_OR_NAME,
        a.STREET_NAME,
        a.TOWN,
        a.COUNTY,
        a.COUNTRY,
        a.POST_CODE,
        a.ZIP_CODE,

        -- Preferred Card
        cd.CARD_TYPE,
        cd.CARD_NUMBER,
        cd.EXPIRY_DATE,

        -- Order Items
        oi.LINE_ITEM_ID,
        oi.PRODUCT_ID,
        oi.UNIT_PRICE,
        oi.QUANTITY,
        oi.DISPATCH_DATE,
        oi.RETURN_DATE,
        oi.GIFT_WRAP,
        oi.CONDITION,
        oi.ESTIMATED_DELIVERY,

        -- Product
        pi.PRODUCT_NAME AS PRODUCT_NAME_EN,
        pd.TRANSLATED_NAME,
        pd.TRANSLATED_DESCRIPTION,
        pi.CATEGORY_ID,
        pi.LIST_PRICE,
        pi.MIN_PRICE,
        pi.PRODUCT_STATUS,

        -- Inventory 
        w.WAREHOUSE_NAME,
        inv.QUANTITY_ON_HAND

    FROM "PORTO01"."ORDERS"@"CLOUD$LINK" o
    JOIN "PORTO01"."CUSTOMERS"@"CLOUD$LINK" c
        ON o.CUSTOMER_ID = c.CUSTOMER_ID
    LEFT JOIN "PORTO01"."ADDRESSES"@"CLOUD$LINK" a
        ON o.DELIVERY_ADDRESS_ID = a.ADDRESS_ID
    LEFT JOIN "PORTO01"."CARD_DETAILS"@"CLOUD$LINK" cd
        ON o.CARD_ID = cd.CARD_ID
    JOIN "PORTO01"."ORDER_ITEMS"@"CLOUD$LINK" oi
        ON o.ORDER_ID = oi.ORDER_ID
    LEFT JOIN "PORTO01"."PRODUCT_INFORMATION"@"CLOUD$LINK" pi
        ON oi.PRODUCT_ID = pi.PRODUCT_ID
    LEFT JOIN "PORTO01"."PRODUCT_DESCRIPTIONS"@"CLOUD$LINK" pd
        ON pd.PRODUCT_ID = oi.PRODUCT_ID
        AND pd.LANGUAGE_ID = 'PT'
    LEFT JOIN "PORTO01"."INVENTORIES"@"CLOUD$LINK" inv
        ON oi.PRODUCT_ID = inv.PRODUCT_ID
        AND o.WAREHOUSE_ID = inv.WAREHOUSE_ID
    LEFT JOIN "PORTO01"."WAREHOUSES"@"CLOUD$LINK" w
        ON o.WAREHOUSE_ID = w.WAREHOUSE_ID
    WHERE o.ORDER_DATE >= DATE '2024-01-01'
      AND o.ORDER_DATE < DATE '2025-01-01'
  ]';
END;
/

ALTER PROCEDURE "DEMO"."CRIAR_TABELA_DESNORMALIZADA2425" 
  COMPILE 
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE
    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'
    NLS_LENGTH_SEMANTICS= BYTE
    PLSQL_WARNINGS= 'DISABLE:ALL'

 REUSE SETTINGS TIMESTAMP '2025-07-31 12:45:23'
/
ALTER TABLE "DEMO"."DBTOOLS$EXECUTION_HISTORY" ADD CONSTRAINT "DBTOOLS$EXECUTION_HISTORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
/
10 10
/

BEGIN 
dbms_scheduler.create_job('"ADP$BEARER_REFRESH_JOB"',
job_type=>'STORED_PROCEDURE', job_action=>
'"C##ADP$SERVICE"."DBMS_SHARE"."REFRESH_BEARER_TOKEN_CREDENTIAL"'
, number_of_arguments=>0,
start_date=>TO_TIMESTAMP_TZ('30-JUL-2025 05.05.00.517882000 PM UTC','DD-MON-RRRR HH.MI.SSXFF AM TZR','NLS_DATE_LANGUAGE=english'), repeat_interval=> 
'FREQ=MINUTELY;INTERVAL=50'
, end_date=>NULL,
job_class=>'"DEFAULT_JOB_CLASS"', enabled=>FALSE, auto_drop=>FALSE,comments=>
'User job to refresh bearer tokens'
);
sys.dbms_scheduler.set_attribute('"ADP$BEARER_REFRESH_JOB"','NLS_ENV','NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_CALENDAR=''GREGORIAN'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'' NLS_TIME_FORMAT=''HH.MI.SSXFF AM'' NLS_TIMESTAMP_FORMAT=''DD-MON-RR HH.MI.SSXFF AM'' NLS_TIME_TZ_FORMAT=''HH.MI.SSXFF AM TZR'' NLS_TIMESTAMP_TZ_FORMAT=''DD-MON-RR HH.MI.SSXFF AM TZR'' NLS_DUAL_CURRENCY=''$'' NLS_COMP=''BINARY'' NLS_LENGTH_SEMANTICS=''BYTE'' NLS_NCHAR_CONV_EXCP=''FALSE''');
dbms_scheduler.enable('"ADP$BEARER_REFRESH_JOB"');
COMMIT; 
END;
/

/